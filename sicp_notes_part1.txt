# Составные процедуры
(define (square x) (* x x) )
(define (sum-of-squares x y) (+ (square x) (square y)))
(define (f a) (sum-of-squares (+ a 1) (* a 2)))

##################################################
# case analysis   (cond conditional)
(define (abs x) 
    (cond   ((> x 0) x)
            ((= x 0) 0)
            ((< x 0) (-x))))
# OR
(define (abs x) 
    (cond   ((< x 0) (-x))
            (else x)))
# OR
(define (abs x)  
    (if (< x 0) (-x)  x))
# (if (предикат) (следствие) (алтернатива))



##################################################
# Exercise 1.3 
(define (test x y z) 
    (if (and (> x z) (> y z)) 
        (+ (* x x) (* y y)) 
        (if (and (> x y) (> z y)) 
            (+ (* x x) (* z z)) 
            (+ (* y y) (* z z)) 
)))
# OR
(define (test1 x y z) 
    (if (and (> x z) (> y z)) 
        ((sum-of-squares x y)) 
        (if (and (> x y) (> z y)) 
            (sum-of-squares x z)
            (sum-of-squares y z) 
)))

##################################################
# TAIL RECURSION
##################################################
# factorial
(define (fact-iter product counter max-count)
    (if (> counter max-count)
        product
        (fact-iter (* counter product)
            (+ counter 1)
            max-count))

(define (factorial n)
    (fact-iter 1 1 n))


##################################################
# Ackermann's function
(define (A x y)
    (cond   ((= y 0) 0)
            ((= x 0) (* 2 y))
            ((= y 1) 2)
            (else (A (- x 1)
                (A x (- y 1))))))

(A 1 2)
(A 1 4)
(A 1 10)
(A 2 3)
(A 2 4)
(A 3 3)

; output
;$1 = 4
;$2 = 16
;$3 = 1024
;$4 = 16
;$5 = 65536
;$6 = 65536

##################################################
# TREE RECURSION
##################################################
# Fibonacci
# ---  Iteration way
(define (fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+ (fib (- n 1 ))
                   (fib (- n 2))))))

# ---- Recursion way
(define (fib-iter a b count)
    (if (= count 0)
        b
        (fib-iter (+ a b) a (- count 1))))

 
